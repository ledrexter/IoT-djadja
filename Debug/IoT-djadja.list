
IoT-djadja.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002ae4  08002ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b14  08002b14  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002b14  08002b14  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b14  08002b14  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000058  08002b74  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002b74  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000645d  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001861  00000000  00000000  000264de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  00027d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  000284d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166dc  00000000  00000000  00028ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007dcd  00000000  00000000  0003f284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c51  00000000  00000000  00047051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7ca2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d40  00000000  00000000  000c7cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002acc 	.word	0x08002acc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002acc 	.word	0x08002acc

0800014c <W5500HardwareInitilize>:
//extern led_ctrl led1,led2;
extern wiz_NetInfo gWIZNETINFO;

SPI_HandleTypeDef hspi1;

void W5500HardwareInitilize(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	W5500_GPIO_CLOCK_EN();
 8000160:	4b2e      	ldr	r3, [pc, #184]	; (800021c <W5500HardwareInitilize+0xd0>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2d      	ldr	r2, [pc, #180]	; (800021c <W5500HardwareInitilize+0xd0>)
 8000166:	f043 0304 	orr.w	r3, r3, #4
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2b      	ldr	r3, [pc, #172]	; (800021c <W5500HardwareInitilize+0xd0>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0304 	and.w	r3, r3, #4
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = W5500_INT_PIN;
 8000178:	2308      	movs	r3, #8
 800017a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800017c:	4b28      	ldr	r3, [pc, #160]	; (8000220 <W5500HardwareInitilize+0xd4>)
 800017e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000180:	2300      	movs	r3, #0
 8000182:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(W5500_INT_PORT, &GPIO_InitStruct);
 8000184:	f107 0308 	add.w	r3, r7, #8
 8000188:	4619      	mov	r1, r3
 800018a:	4826      	ldr	r0, [pc, #152]	; (8000224 <W5500HardwareInitilize+0xd8>)
 800018c:	f000 fb78 	bl	8000880 <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2104      	movs	r1, #4
 8000194:	4823      	ldr	r0, [pc, #140]	; (8000224 <W5500HardwareInitilize+0xd8>)
 8000196:	f000 fcf7 	bl	8000b88 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = W5500_RESET_PIN;
 800019a:	2304      	movs	r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800019e:	2301      	movs	r3, #1
 80001a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001a2:	2300      	movs	r3, #0
 80001a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001a6:	2302      	movs	r3, #2
 80001a8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(W5500_RESET_PORT, &GPIO_InitStruct);
 80001aa:	f107 0308 	add.w	r3, r7, #8
 80001ae:	4619      	mov	r1, r3
 80001b0:	481c      	ldr	r0, [pc, #112]	; (8000224 <W5500HardwareInitilize+0xd8>)
 80001b2:	f000 fb65 	bl	8000880 <HAL_GPIO_Init>

	hspi1.Instance = W5500_SPI;
 80001b6:	4b1c      	ldr	r3, [pc, #112]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001b8:	4a1c      	ldr	r2, [pc, #112]	; (800022c <W5500HardwareInitilize+0xe0>)
 80001ba:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80001bc:	4b1a      	ldr	r3, [pc, #104]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001be:	f44f 7282 	mov.w	r2, #260	; 0x104
 80001c2:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80001c4:	4b18      	ldr	r3, [pc, #96]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80001ca:	4b17      	ldr	r3, [pc, #92]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80001d0:	4b15      	ldr	r3, [pc, #84]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80001d6:	4b14      	ldr	r3, [pc, #80]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001d8:	2200      	movs	r2, #0
 80001da:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001e2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80001e4:	4b10      	ldr	r3, [pc, #64]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80001ea:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80001f6:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <W5500HardwareInitilize+0xdc>)
 80001fe:	220a      	movs	r2, #10
 8000200:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000202:	4809      	ldr	r0, [pc, #36]	; (8000228 <W5500HardwareInitilize+0xdc>)
 8000204:	f001 f8c0 	bl	8001388 <HAL_SPI_Init>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d000      	beq.n	8000210 <W5500HardwareInitilize+0xc4>
		asm("bkpt 255");
 800020e:	beff      	bkpt	0x00ff
	}

	W5500HardwareReset();
 8000210:	f000 f848 	bl	80002a4 <W5500HardwareReset>
}
 8000214:	bf00      	nop
 8000216:	3718      	adds	r7, #24
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	40021000 	.word	0x40021000
 8000220:	10110000 	.word	0x10110000
 8000224:	40010800 	.word	0x40010800
 8000228:	20000074 	.word	0x20000074
 800022c:	40013000 	.word	0x40013000

08000230 <W5500Initialze>:

void W5500Initialze(void) {
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
	unsigned char temp;
	unsigned char W5500FifoSize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2, }, { 2, 2,
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <W5500Initialze+0x60>)
 8000238:	1d3c      	adds	r4, r7, #4
 800023a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800023c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			2, 2, 2, 2, 2, 2 } };

	W5500DeSelect();
 8000240:	f000 f896 	bl	8000370 <W5500DeSelect>

	/* spi function register */
	reg_wizchip_spi_cbfunc(W5500ReadByte, W5500WriteByte);
 8000244:	4913      	ldr	r1, [pc, #76]	; (8000294 <W5500Initialze+0x64>)
 8000246:	4814      	ldr	r0, [pc, #80]	; (8000298 <W5500Initialze+0x68>)
 8000248:	f001 ffcc 	bl	80021e4 <reg_wizchip_spi_cbfunc>

	/* CS function register */
	reg_wizchip_cs_cbfunc(W5500Select, W5500DeSelect);
 800024c:	4913      	ldr	r1, [pc, #76]	; (800029c <W5500Initialze+0x6c>)
 800024e:	4814      	ldr	r0, [pc, #80]	; (80002a0 <W5500Initialze+0x70>)
 8000250:	f001 ffa4 	bl	800219c <reg_wizchip_cs_cbfunc>

	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) W5500FifoSize) == -1) {
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	4619      	mov	r1, r3
 8000258:	2001      	movs	r0, #1
 800025a:	f001 ffef 	bl	800223c <ctlwizchip>
 800025e:	4603      	mov	r3, r0
 8000260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000264:	d100      	bne.n	8000268 <W5500Initialze+0x38>
		asm("bkpt 255");
 8000266:	beff      	bkpt	0x00ff
//		printf("W5500 initialized fail.\r\n");
	}

	do { //check phy status.
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &temp) == -1) {
 8000268:	f107 0317 	add.w	r3, r7, #23
 800026c:	4619      	mov	r1, r3
 800026e:	200f      	movs	r0, #15
 8000270:	f001 ffe4 	bl	800223c <ctlwizchip>
 8000274:	4603      	mov	r3, r0
 8000276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800027a:	d100      	bne.n	800027e <W5500Initialze+0x4e>
			asm("bkpt 255");
 800027c:	beff      	bkpt	0x00ff
//			printf("Unknown PHY link status.\r\n");
		}
	} while (temp == PHY_LINK_OFF);
 800027e:	7dfb      	ldrb	r3, [r7, #23]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d0f1      	beq.n	8000268 <W5500Initialze+0x38>

}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	371c      	adds	r7, #28
 800028a:	46bd      	mov	sp, r7
 800028c:	bd90      	pop	{r4, r7, pc}
 800028e:	bf00      	nop
 8000290:	08002ae4 	.word	0x08002ae4
 8000294:	080002f9 	.word	0x080002f9
 8000298:	08000329 	.word	0x08000329
 800029c:	08000371 	.word	0x08000371
 80002a0:	08000359 	.word	0x08000359

080002a4 <W5500HardwareReset>:

void W5500HardwareReset(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
	int i, j, k;
	k = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(W5500_RESET_PORT, W5500_RESET_PIN, GPIO_PIN_RESET);
 80002ae:	2200      	movs	r2, #0
 80002b0:	2104      	movs	r1, #4
 80002b2:	4810      	ldr	r0, [pc, #64]	; (80002f4 <W5500HardwareReset+0x50>)
 80002b4:	f000 fc68 	bl	8000b88 <HAL_GPIO_WritePin>
	for (i = 0; i < 100; i++) {
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
 80002bc:	e00e      	b.n	80002dc <W5500HardwareReset+0x38>
		for (j = 0; j < 100; j++) {
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
 80002c2:	e005      	b.n	80002d0 <W5500HardwareReset+0x2c>
			k++;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	607b      	str	r3, [r7, #4]
		for (j = 0; j < 100; j++) {
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	3301      	adds	r3, #1
 80002ce:	60bb      	str	r3, [r7, #8]
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	2b63      	cmp	r3, #99	; 0x63
 80002d4:	ddf6      	ble.n	80002c4 <W5500HardwareReset+0x20>
	for (i = 0; i < 100; i++) {
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3301      	adds	r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	2b63      	cmp	r3, #99	; 0x63
 80002e0:	dded      	ble.n	80002be <W5500HardwareReset+0x1a>
		}
	}
	HAL_GPIO_WritePin(W5500_RESET_PORT, W5500_RESET_PIN, GPIO_PIN_SET);
 80002e2:	2201      	movs	r2, #1
 80002e4:	2104      	movs	r1, #4
 80002e6:	4803      	ldr	r0, [pc, #12]	; (80002f4 <W5500HardwareReset+0x50>)
 80002e8:	f000 fc4e 	bl	8000b88 <HAL_GPIO_WritePin>
}
 80002ec:	bf00      	nop
 80002ee:	3710      	adds	r7, #16
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40010800 	.word	0x40010800

080002f8 <W5500WriteByte>:

void W5500WriteByte(unsigned char byte) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, (uint8_t*) &byte, 1, 100);
 8000302:	1df9      	adds	r1, r7, #7
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	2201      	movs	r2, #1
 8000308:	4806      	ldr	r0, [pc, #24]	; (8000324 <W5500WriteByte+0x2c>)
 800030a:	f001 f8c1 	bl	8001490 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &byte, 1, 100);
 800030e:	1df9      	adds	r1, r7, #7
 8000310:	2364      	movs	r3, #100	; 0x64
 8000312:	2201      	movs	r2, #1
 8000314:	4803      	ldr	r0, [pc, #12]	; (8000324 <W5500WriteByte+0x2c>)
 8000316:	f001 f9f7 	bl	8001708 <HAL_SPI_Receive>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000074 	.word	0x20000074

08000328 <W5500ReadByte>:

unsigned char W5500ReadByte(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0

	unsigned char byte = 0xff;
 800032e:	23ff      	movs	r3, #255	; 0xff
 8000330:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, (uint8_t*) &byte, 1, 100);
 8000332:	1df9      	adds	r1, r7, #7
 8000334:	2364      	movs	r3, #100	; 0x64
 8000336:	2201      	movs	r2, #1
 8000338:	4806      	ldr	r0, [pc, #24]	; (8000354 <W5500ReadByte+0x2c>)
 800033a:	f001 f8a9 	bl	8001490 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*) &byte, 1, 100);
 800033e:	1df9      	adds	r1, r7, #7
 8000340:	2364      	movs	r3, #100	; 0x64
 8000342:	2201      	movs	r2, #1
 8000344:	4803      	ldr	r0, [pc, #12]	; (8000354 <W5500ReadByte+0x2c>)
 8000346:	f001 f9df 	bl	8001708 <HAL_SPI_Receive>

	return byte;
 800034a:	79fb      	ldrb	r3, [r7, #7]
}
 800034c:	4618      	mov	r0, r3
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000074 	.word	0x20000074

08000358 <W5500Select>:

void W5500Select(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_PORT, W5500_CS_PIN, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2110      	movs	r1, #16
 8000360:	4802      	ldr	r0, [pc, #8]	; (800036c <W5500Select+0x14>)
 8000362:	f000 fc11 	bl	8000b88 <HAL_GPIO_WritePin>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010800 	.word	0x40010800

08000370 <W5500DeSelect>:

void W5500DeSelect(void) {
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_CS_PORT, W5500_CS_PIN, GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2110      	movs	r1, #16
 8000378:	4802      	ldr	r0, [pc, #8]	; (8000384 <W5500DeSelect+0x14>)
 800037a:	f000 fc05 	bl	8000b88 <HAL_GPIO_WritePin>
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40010800 	.word	0x40010800

08000388 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800038c:	f000 f932 	bl	80005f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000390:	f000 f818 	bl	80003c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000394:	f000 f852 	bl	800043c <MX_GPIO_Init>
	W5500HardwareInitilize();
 8000398:	f7ff fed8 	bl	800014c <W5500HardwareInitilize>

	W5500Initialze();
 800039c:	f7ff ff48 	bl	8000230 <W5500Initialze>
	/* USER CODE BEGIN 2 */
	wizchip_setnetinfo(&gWIZNETINFO);
 80003a0:	4806      	ldr	r0, [pc, #24]	; (80003bc <main+0x34>)
 80003a2:	f002 fae7 	bl	8002974 <wizchip_setnetinfo>

	setSHAR(mac_address);
 80003a6:	2206      	movs	r2, #6
 80003a8:	4905      	ldr	r1, [pc, #20]	; (80003c0 <main+0x38>)
 80003aa:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80003ae:	f001 fe51 	bl	8002054 <WIZCHIP_WRITE_BUF>
	/* USER CODE END 2 */
	wizchip_getnetinfo(&gWIZNETINFO);
 80003b2:	4802      	ldr	r0, [pc, #8]	; (80003bc <main+0x34>)
 80003b4:	f002 fb1e 	bl	80029f4 <wizchip_getnetinfo>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80003b8:	e7fe      	b.n	80003b8 <main+0x30>
 80003ba:	bf00      	nop
 80003bc:	20000008 	.word	0x20000008
 80003c0:	20000000 	.word	0x20000000

080003c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b090      	sub	sp, #64	; 0x40
 80003c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 fb72 	bl	8002abc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ea:	2301      	movs	r3, #1
 80003ec:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ee:	2310      	movs	r3, #16
 80003f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003f6:	f107 0318 	add.w	r3, r7, #24
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fbdc 	bl	8000bb8 <HAL_RCC_OscConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x46>
		Error_Handler();
 8000406:	f000 f82f 	bl	8000468 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800040a:	230f      	movs	r3, #15
 800040c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800040e:	2300      	movs	r3, #0
 8000410:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fe4a 	bl	80010bc <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x6e>
		Error_Handler();
 800042e:	f000 f81b 	bl	8000468 <Error_Handler>
	}
}
 8000432:	bf00      	nop
 8000434:	3740      	adds	r7, #64	; 0x40
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_GPIO_Init+0x28>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a07      	ldr	r2, [pc, #28]	; (8000464 <MX_GPIO_Init+0x28>)
 8000448:	f043 0304 	orr.w	r3, r3, #4
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <MX_GPIO_Init+0x28>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0304 	and.w	r3, r3, #4
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40021000 	.word	0x40021000

08000468 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>
	...

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <HAL_MspInit+0x40>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <HAL_MspInit+0x40>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <HAL_MspInit+0x40>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <HAL_MspInit+0x40>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <HAL_MspInit+0x40>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <HAL_MspInit+0x40>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	40021000 	.word	0x40021000

080004b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <HAL_SPI_MspInit+0x88>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d12f      	bne.n	8000538 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a19      	ldr	r2, [pc, #100]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a13      	ldr	r2, [pc, #76]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <HAL_SPI_MspInit+0x8c>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050c:	2302      	movs	r3, #2
 800050e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	4619      	mov	r1, r3
 800051a:	480b      	ldr	r0, [pc, #44]	; (8000548 <HAL_SPI_MspInit+0x90>)
 800051c:	f000 f9b0 	bl	8000880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000520:	2340      	movs	r3, #64	; 0x40
 8000522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <HAL_SPI_MspInit+0x90>)
 8000534:	f000 f9a4 	bl	8000880 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000538:	bf00      	nop
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40013000 	.word	0x40013000
 8000544:	40021000 	.word	0x40021000
 8000548:	40010800 	.word	0x40010800

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <NMI_Handler+0x4>

08000552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <MemManage_Handler+0x4>

0800055e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <UsageFault_Handler+0x4>

0800056a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000592:	f000 f875 	bl	8000680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
	...

080005a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005aa:	490d      	ldr	r1, [pc, #52]	; (80005e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005c0:	4c0a      	ldr	r4, [pc, #40]	; (80005ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ce:	f7ff ffe4 	bl	800059a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005d2:	f002 fa4f 	bl	8002a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d6:	f7ff fed7 	bl	8000388 <main>
  bx lr
 80005da:	4770      	bx	lr
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80005e4:	08002b1c 	.word	0x08002b1c
  ldr r2, =_sbss
 80005e8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80005ec:	200000d8 	.word	0x200000d8

080005f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC1_2_IRQHandler>
	...

080005f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_Init+0x28>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_Init+0x28>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f907 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	200f      	movs	r0, #15
 800060c:	f000 f808 	bl	8000620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000610:	f7ff ff30 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40022000 	.word	0x40022000

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_InitTick+0x54>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_InitTick+0x58>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	fbb3 f3f1 	udiv	r3, r3, r1
 800063a:	fbb2 f3f3 	udiv	r3, r2, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f911 	bl	8000866 <HAL_SYSTICK_Config>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	e00e      	b.n	800066c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b0f      	cmp	r3, #15
 8000652:	d80a      	bhi.n	800066a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000654:	2200      	movs	r2, #0
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800065c:	f000 f8e7 	bl	800082e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <HAL_InitTick+0x5c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000666:	2300      	movs	r3, #0
 8000668:	e000      	b.n	800066c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000020 	.word	0x20000020
 8000678:	20000028 	.word	0x20000028
 800067c:	20000024 	.word	0x20000024

08000680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_IncTick+0x1c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_IncTick+0x20>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4413      	add	r3, r2
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <HAL_IncTick+0x20>)
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	20000028 	.word	0x20000028
 80006a0:	200000cc 	.word	0x200000cc

080006a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return uwTick;
 80006a8:	4b02      	ldr	r3, [pc, #8]	; (80006b4 <HAL_GetTick+0x10>)
 80006aa:	681b      	ldr	r3, [r3, #0]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	200000cc 	.word	0x200000cc

080006b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db0a      	blt.n	8000746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	490c      	ldr	r1, [pc, #48]	; (8000768 <__NVIC_SetPriority+0x4c>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	440b      	add	r3, r1
 8000740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000744:	e00a      	b.n	800075c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4908      	ldr	r1, [pc, #32]	; (800076c <__NVIC_SetPriority+0x50>)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	3b04      	subs	r3, #4
 8000754:	0112      	lsls	r2, r2, #4
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	440b      	add	r3, r1
 800075a:	761a      	strb	r2, [r3, #24]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000e100 	.word	0xe000e100
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43da      	mvns	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	401a      	ands	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	4313      	orrs	r3, r2
         );
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	; 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007f8:	f7ff ff90 	bl	800071c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff49 	bl	80006b8 <__NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff5e 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff90 	bl	8000770 <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5f 	bl	800071c <__NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffb0 	bl	80007d4 <SysTick_Config>
 8000874:	4603      	mov	r3, r0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000880:	b480      	push	{r7}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000892:	e169      	b.n	8000b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000894:	2201      	movs	r2, #1
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	69fa      	ldr	r2, [r7, #28]
 80008a4:	4013      	ands	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	f040 8158 	bne.w	8000b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	4a9a      	ldr	r2, [pc, #616]	; (8000b20 <HAL_GPIO_Init+0x2a0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d05e      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008bc:	4a98      	ldr	r2, [pc, #608]	; (8000b20 <HAL_GPIO_Init+0x2a0>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d875      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008c2:	4a98      	ldr	r2, [pc, #608]	; (8000b24 <HAL_GPIO_Init+0x2a4>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d058      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008c8:	4a96      	ldr	r2, [pc, #600]	; (8000b24 <HAL_GPIO_Init+0x2a4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d86f      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008ce:	4a96      	ldr	r2, [pc, #600]	; (8000b28 <HAL_GPIO_Init+0x2a8>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d052      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008d4:	4a94      	ldr	r2, [pc, #592]	; (8000b28 <HAL_GPIO_Init+0x2a8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d869      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008da:	4a94      	ldr	r2, [pc, #592]	; (8000b2c <HAL_GPIO_Init+0x2ac>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d04c      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008e0:	4a92      	ldr	r2, [pc, #584]	; (8000b2c <HAL_GPIO_Init+0x2ac>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d863      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008e6:	4a92      	ldr	r2, [pc, #584]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d046      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008ec:	4a90      	ldr	r2, [pc, #576]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d85d      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d82a      	bhi.n	800094c <HAL_GPIO_Init+0xcc>
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d859      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008fa:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <HAL_GPIO_Init+0x80>)
 80008fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000900:	0800097b 	.word	0x0800097b
 8000904:	08000955 	.word	0x08000955
 8000908:	08000967 	.word	0x08000967
 800090c:	080009a9 	.word	0x080009a9
 8000910:	080009af 	.word	0x080009af
 8000914:	080009af 	.word	0x080009af
 8000918:	080009af 	.word	0x080009af
 800091c:	080009af 	.word	0x080009af
 8000920:	080009af 	.word	0x080009af
 8000924:	080009af 	.word	0x080009af
 8000928:	080009af 	.word	0x080009af
 800092c:	080009af 	.word	0x080009af
 8000930:	080009af 	.word	0x080009af
 8000934:	080009af 	.word	0x080009af
 8000938:	080009af 	.word	0x080009af
 800093c:	080009af 	.word	0x080009af
 8000940:	080009af 	.word	0x080009af
 8000944:	0800095d 	.word	0x0800095d
 8000948:	08000971 	.word	0x08000971
 800094c:	4a79      	ldr	r2, [pc, #484]	; (8000b34 <HAL_GPIO_Init+0x2b4>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d013      	beq.n	800097a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000952:	e02c      	b.n	80009ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	623b      	str	r3, [r7, #32]
          break;
 800095a:	e029      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	3304      	adds	r3, #4
 8000962:	623b      	str	r3, [r7, #32]
          break;
 8000964:	e024      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	3308      	adds	r3, #8
 800096c:	623b      	str	r3, [r7, #32]
          break;
 800096e:	e01f      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	330c      	adds	r3, #12
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e01a      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d102      	bne.n	8000988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000982:	2304      	movs	r3, #4
 8000984:	623b      	str	r3, [r7, #32]
          break;
 8000986:	e013      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d105      	bne.n	800099c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000990:	2308      	movs	r3, #8
 8000992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	611a      	str	r2, [r3, #16]
          break;
 800099a:	e009      	b.n	80009b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800099c:	2308      	movs	r3, #8
 800099e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	615a      	str	r2, [r3, #20]
          break;
 80009a6:	e003      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
          break;
 80009ac:	e000      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          break;
 80009ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	2bff      	cmp	r3, #255	; 0xff
 80009b4:	d801      	bhi.n	80009ba <HAL_GPIO_Init+0x13a>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	e001      	b.n	80009be <HAL_GPIO_Init+0x13e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3304      	adds	r3, #4
 80009be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	2bff      	cmp	r3, #255	; 0xff
 80009c4:	d802      	bhi.n	80009cc <HAL_GPIO_Init+0x14c>
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	e002      	b.n	80009d2 <HAL_GPIO_Init+0x152>
 80009cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ce:	3b08      	subs	r3, #8
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	210f      	movs	r1, #15
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	401a      	ands	r2, r3
 80009e4:	6a39      	ldr	r1, [r7, #32]
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	431a      	orrs	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 80b1 	beq.w	8000b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a00:	4b4d      	ldr	r3, [pc, #308]	; (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b4a      	ldr	r3, [pc, #296]	; (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a18:	4a48      	ldr	r2, [pc, #288]	; (8000b3c <HAL_GPIO_Init+0x2bc>)
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	3302      	adds	r3, #2
 8000a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	220f      	movs	r2, #15
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a40      	ldr	r2, [pc, #256]	; (8000b40 <HAL_GPIO_Init+0x2c0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d013      	beq.n	8000a6c <HAL_GPIO_Init+0x1ec>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a3f      	ldr	r2, [pc, #252]	; (8000b44 <HAL_GPIO_Init+0x2c4>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d00d      	beq.n	8000a68 <HAL_GPIO_Init+0x1e8>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a3e      	ldr	r2, [pc, #248]	; (8000b48 <HAL_GPIO_Init+0x2c8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0x1e4>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a3d      	ldr	r2, [pc, #244]	; (8000b4c <HAL_GPIO_Init+0x2cc>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d101      	bne.n	8000a60 <HAL_GPIO_Init+0x1e0>
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e006      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a60:	2304      	movs	r3, #4
 8000a62:	e004      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a64:	2302      	movs	r3, #2
 8000a66:	e002      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a70:	f002 0203 	and.w	r2, r2, #3
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	4093      	lsls	r3, r2
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a7e:	492f      	ldr	r1, [pc, #188]	; (8000b3c <HAL_GPIO_Init+0x2bc>)
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	3302      	adds	r3, #2
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a98:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	492c      	ldr	r1, [pc, #176]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	600b      	str	r3, [r1, #0]
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4928      	ldr	r1, [pc, #160]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac0:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	4922      	ldr	r1, [pc, #136]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	604b      	str	r3, [r1, #4]
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	491e      	ldr	r1, [pc, #120]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	4918      	ldr	r1, [pc, #96]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	608b      	str	r3, [r1, #8]
 8000af4:	e006      	b.n	8000b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4914      	ldr	r1, [pc, #80]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d021      	beq.n	8000b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	490e      	ldr	r1, [pc, #56]	; (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60cb      	str	r3, [r1, #12]
 8000b1c:	e021      	b.n	8000b62 <HAL_GPIO_Init+0x2e2>
 8000b1e:	bf00      	nop
 8000b20:	10320000 	.word	0x10320000
 8000b24:	10310000 	.word	0x10310000
 8000b28:	10220000 	.word	0x10220000
 8000b2c:	10210000 	.word	0x10210000
 8000b30:	10120000 	.word	0x10120000
 8000b34:	10110000 	.word	0x10110000
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	40010800 	.word	0x40010800
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	40011000 	.word	0x40011000
 8000b4c:	40011400 	.word	0x40011400
 8000b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_GPIO_Init+0x304>)
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	4909      	ldr	r1, [pc, #36]	; (8000b84 <HAL_GPIO_Init+0x304>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	3301      	adds	r3, #1
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f47f ae8e 	bne.w	8000894 <HAL_GPIO_Init+0x14>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	372c      	adds	r7, #44	; 0x2c
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b98:	787b      	ldrb	r3, [r7, #1]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ba4:	e003      	b.n	8000bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	611a      	str	r2, [r3, #16]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e272      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 8087 	beq.w	8000ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bd8:	4b92      	ldr	r3, [pc, #584]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d00c      	beq.n	8000bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be4:	4b8f      	ldr	r3, [pc, #572]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d112      	bne.n	8000c16 <HAL_RCC_OscConfig+0x5e>
 8000bf0:	4b8c      	ldr	r3, [pc, #560]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfc:	d10b      	bne.n	8000c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfe:	4b89      	ldr	r3, [pc, #548]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d06c      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x12c>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d168      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e24c      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1e:	d106      	bne.n	8000c2e <HAL_RCC_OscConfig+0x76>
 8000c20:	4b80      	ldr	r3, [pc, #512]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a7f      	ldr	r2, [pc, #508]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e02e      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0x98>
 8000c36:	4b7b      	ldr	r3, [pc, #492]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a7a      	ldr	r2, [pc, #488]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b78      	ldr	r3, [pc, #480]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a77      	ldr	r2, [pc, #476]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e01d      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0xbc>
 8000c5a:	4b72      	ldr	r3, [pc, #456]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a71      	ldr	r2, [pc, #452]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a6e      	ldr	r2, [pc, #440]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e00b      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c74:	4b6b      	ldr	r3, [pc, #428]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a6a      	ldr	r2, [pc, #424]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b68      	ldr	r3, [pc, #416]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a67      	ldr	r2, [pc, #412]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d013      	beq.n	8000cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fd06 	bl	80006a4 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fd02 	bl	80006a4 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	; 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e200      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cae:	4b5d      	ldr	r3, [pc, #372]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0xe4>
 8000cba:	e014      	b.n	8000ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fcf2 	bl	80006a4 <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc4:	f7ff fcee 	bl	80006a4 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b64      	cmp	r3, #100	; 0x64
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e1ec      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd6:	4b53      	ldr	r3, [pc, #332]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f0      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x10c>
 8000ce2:	e000      	b.n	8000ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d063      	beq.n	8000dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00b      	beq.n	8000d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cfe:	4b49      	ldr	r3, [pc, #292]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d11c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x18c>
 8000d0a:	4b46      	ldr	r3, [pc, #280]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d116      	bne.n	8000d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d16:	4b43      	ldr	r3, [pc, #268]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <HAL_RCC_OscConfig+0x176>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d001      	beq.n	8000d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e1c0      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4939      	ldr	r1, [pc, #228]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d42:	e03a      	b.n	8000dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d020      	beq.n	8000d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d4c:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <HAL_RCC_OscConfig+0x270>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d52:	f7ff fca7 	bl	80006a4 <HAL_GetTick>
 8000d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fca3 	bl	80006a4 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e1a1      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d78:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4927      	ldr	r1, [pc, #156]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
 8000d8c:	e015      	b.n	8000dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_RCC_OscConfig+0x270>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fc86 	bl	80006a4 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc82 	bl	80006a4 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e180      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d03a      	beq.n	8000e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d019      	beq.n	8000e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_RCC_OscConfig+0x274>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd4:	f7ff fc66 	bl	80006a4 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc62 	bl	80006a4 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e160      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 faa6 	bl	800134c <RCC_Delay>
 8000e00:	e01c      	b.n	8000e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_RCC_OscConfig+0x274>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e08:	f7ff fc4c 	bl	80006a4 <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0e:	e00f      	b.n	8000e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc48 	bl	80006a4 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d908      	bls.n	8000e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e146      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	42420000 	.word	0x42420000
 8000e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e30:	4b92      	ldr	r3, [pc, #584]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1e9      	bne.n	8000e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80a6 	beq.w	8000f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e4e:	4b8b      	ldr	r3, [pc, #556]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10d      	bne.n	8000e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b88      	ldr	r3, [pc, #544]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a87      	ldr	r2, [pc, #540]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b85      	ldr	r3, [pc, #532]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e72:	2301      	movs	r3, #1
 8000e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e76:	4b82      	ldr	r3, [pc, #520]	; (8001080 <HAL_RCC_OscConfig+0x4c8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d118      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e82:	4b7f      	ldr	r3, [pc, #508]	; (8001080 <HAL_RCC_OscConfig+0x4c8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a7e      	ldr	r2, [pc, #504]	; (8001080 <HAL_RCC_OscConfig+0x4c8>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fc09 	bl	80006a4 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e96:	f7ff fc05 	bl	80006a4 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b64      	cmp	r3, #100	; 0x64
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e103      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea8:	4b75      	ldr	r3, [pc, #468]	; (8001080 <HAL_RCC_OscConfig+0x4c8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f0      	beq.n	8000e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d106      	bne.n	8000eca <HAL_RCC_OscConfig+0x312>
 8000ebc:	4b6f      	ldr	r3, [pc, #444]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4a6e      	ldr	r2, [pc, #440]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6213      	str	r3, [r2, #32]
 8000ec8:	e02d      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0x334>
 8000ed2:	4b6a      	ldr	r3, [pc, #424]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	4a69      	ldr	r2, [pc, #420]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	6213      	str	r3, [r2, #32]
 8000ede:	4b67      	ldr	r3, [pc, #412]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a66      	ldr	r2, [pc, #408]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	6213      	str	r3, [r2, #32]
 8000eea:	e01c      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d10c      	bne.n	8000f0e <HAL_RCC_OscConfig+0x356>
 8000ef4:	4b61      	ldr	r3, [pc, #388]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4a60      	ldr	r2, [pc, #384]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6213      	str	r3, [r2, #32]
 8000f00:	4b5e      	ldr	r3, [pc, #376]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a5d      	ldr	r2, [pc, #372]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6213      	str	r3, [r2, #32]
 8000f0c:	e00b      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000f0e:	4b5b      	ldr	r3, [pc, #364]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a5a      	ldr	r2, [pc, #360]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	6213      	str	r3, [r2, #32]
 8000f1a:	4b58      	ldr	r3, [pc, #352]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	4a57      	ldr	r2, [pc, #348]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	f023 0304 	bic.w	r3, r3, #4
 8000f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d015      	beq.n	8000f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fbb9 	bl	80006a4 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fbb5 	bl	80006a4 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e0b1      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4c:	4b4b      	ldr	r3, [pc, #300]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0ee      	beq.n	8000f36 <HAL_RCC_OscConfig+0x37e>
 8000f58:	e014      	b.n	8000f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fba3 	bl	80006a4 <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f60:	e00a      	b.n	8000f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f62:	f7ff fb9f 	bl	80006a4 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e09b      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f78:	4b40      	ldr	r3, [pc, #256]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1ee      	bne.n	8000f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d105      	bne.n	8000f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a3b      	ldr	r2, [pc, #236]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8087 	beq.w	80010ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa0:	4b36      	ldr	r3, [pc, #216]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d061      	beq.n	8001070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d146      	bne.n	8001042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <HAL_RCC_OscConfig+0x4cc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb73 	bl	80006a4 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc2:	f7ff fb6f 	bl	80006a4 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e06d      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe8:	d108      	bne.n	8000ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	4921      	ldr	r1, [pc, #132]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a19      	ldr	r1, [r3, #32]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	430b      	orrs	r3, r1
 800100e:	491b      	ldr	r1, [pc, #108]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_RCC_OscConfig+0x4cc>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fb43 	bl	80006a4 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001022:	f7ff fb3f 	bl	80006a4 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e03d      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x46a>
 8001040:	e035      	b.n	80010ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_RCC_OscConfig+0x4cc>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fb2c 	bl	80006a4 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001050:	f7ff fb28 	bl	80006a4 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e026      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_RCC_OscConfig+0x4c4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x498>
 800106e:	e01e      	b.n	80010ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d107      	bne.n	8001088 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e019      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
 800107c:	40021000 	.word	0x40021000
 8001080:	40007000 	.word	0x40007000
 8001084:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_RCC_OscConfig+0x500>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	429a      	cmp	r2, r3
 800109a:	d106      	bne.n	80010aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d001      	beq.n	80010ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0d0      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010d0:	4b6a      	ldr	r3, [pc, #424]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d910      	bls.n	8001100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	4b67      	ldr	r3, [pc, #412]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 0207 	bic.w	r2, r3, #7
 80010e6:	4965      	ldr	r1, [pc, #404]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	4b63      	ldr	r3, [pc, #396]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0b8      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001118:	4b59      	ldr	r3, [pc, #356]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001122:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800113a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113c:	4b50      	ldr	r3, [pc, #320]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	494d      	ldr	r1, [pc, #308]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	4313      	orrs	r3, r2
 800114c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d040      	beq.n	80011dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d107      	bne.n	8001172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d115      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e07f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d107      	bne.n	800118a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117a:	4b41      	ldr	r3, [pc, #260]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e073      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e06b      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119a:	4b39      	ldr	r3, [pc, #228]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f023 0203 	bic.w	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4936      	ldr	r1, [pc, #216]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ac:	f7ff fa7a 	bl	80006a4 <HAL_GetTick>
 80011b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b2:	e00a      	b.n	80011ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b4:	f7ff fa76 	bl	80006a4 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e053      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 020c 	and.w	r2, r3, #12
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	429a      	cmp	r2, r3
 80011da:	d1eb      	bne.n	80011b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d210      	bcs.n	800120c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 0207 	bic.w	r2, r3, #7
 80011f2:	4922      	ldr	r1, [pc, #136]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e032      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4916      	ldr	r1, [pc, #88]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	490e      	ldr	r1, [pc, #56]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800124a:	f000 f821 	bl	8001290 <HAL_RCC_GetSysClockFreq>
 800124e:	4602      	mov	r2, r0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	490a      	ldr	r1, [pc, #40]	; (8001284 <HAL_RCC_ClockConfig+0x1c8>)
 800125c:	5ccb      	ldrb	r3, [r1, r3]
 800125e:	fa22 f303 	lsr.w	r3, r2, r3
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1cc>)
 8001264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_RCC_ClockConfig+0x1d0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f9d8 	bl	8000620 <HAL_InitTick>

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40022000 	.word	0x40022000
 8001280:	40021000 	.word	0x40021000
 8001284:	08002b04 	.word	0x08002b04
 8001288:	20000020 	.word	0x20000020
 800128c:	20000024 	.word	0x20000024

08001290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001290:	b490      	push	{r4, r7}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <HAL_RCC_GetSysClockFreq+0xac>)
 8001298:	1d3c      	adds	r4, r7, #4
 800129a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800129c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012a0:	f240 2301 	movw	r3, #513	; 0x201
 80012a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d002      	beq.n	80012d0 <HAL_RCC_GetSysClockFreq+0x40>
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d003      	beq.n	80012d6 <HAL_RCC_GetSysClockFreq+0x46>
 80012ce:	e02b      	b.n	8001328 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012d0:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012d2:	623b      	str	r3, [r7, #32]
      break;
 80012d4:	e02b      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	0c9b      	lsrs	r3, r3, #18
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3328      	adds	r3, #40	; 0x28
 80012e0:	443b      	add	r3, r7
 80012e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012e6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d012      	beq.n	8001318 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	0c5b      	lsrs	r3, r3, #17
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	3328      	adds	r3, #40	; 0x28
 80012fe:	443b      	add	r3, r7
 8001300:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001304:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_RCC_GetSysClockFreq+0xb4>)
 800130a:	fb03 f202 	mul.w	r2, r3, r2
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	fbb2 f3f3 	udiv	r3, r2, r3
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
 8001316:	e004      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	623b      	str	r3, [r7, #32]
      break;
 8001326:	e002      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_RCC_GetSysClockFreq+0xb4>)
 800132a:	623b      	str	r3, [r7, #32]
      break;
 800132c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800132e:	6a3b      	ldr	r3, [r7, #32]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bc90      	pop	{r4, r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	08002af4 	.word	0x08002af4
 8001340:	40021000 	.word	0x40021000
 8001344:	007a1200 	.word	0x007a1200
 8001348:	003d0900 	.word	0x003d0900

0800134c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <RCC_Delay+0x34>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <RCC_Delay+0x38>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	0a5b      	lsrs	r3, r3, #9
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	fb02 f303 	mul.w	r3, r2, r3
 8001366:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001368:	bf00      	nop
  }
  while (Delay --);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1e5a      	subs	r2, r3, #1
 800136e:	60fa      	str	r2, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f9      	bne.n	8001368 <RCC_Delay+0x1c>
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	20000020 	.word	0x20000020
 8001384:	10624dd3 	.word	0x10624dd3

08001388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e076      	b.n	8001488 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d108      	bne.n	80013b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80013aa:	d009      	beq.n	80013c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
 80013b2:	e005      	b.n	80013c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff f86c 	bl	80004b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2202      	movs	r2, #2
 80013e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001444:	ea42 0103 	orr.w	r1, r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	0c1a      	lsrs	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f002 0204 	and.w	r2, r2, #4
 8001466:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	69da      	ldr	r2, [r3, #28]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001476:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_SPI_Transmit+0x22>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e126      	b.n	8001700 <HAL_SPI_Transmit+0x270>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80014ba:	f7ff f8f3 	bl	80006a4 <HAL_GetTick>
 80014be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d002      	beq.n	80014d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80014d0:	2302      	movs	r3, #2
 80014d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80014d4:	e10b      	b.n	80016ee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <HAL_SPI_Transmit+0x52>
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80014e6:	e102      	b.n	80016ee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2203      	movs	r2, #3
 80014ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	88fa      	ldrh	r2, [r7, #6]
 8001500:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	88fa      	ldrh	r2, [r7, #6]
 8001506:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800152e:	d10f      	bne.n	8001550 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800153e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800154e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155a:	2b40      	cmp	r3, #64	; 0x40
 800155c:	d007      	beq.n	800156e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001576:	d14b      	bne.n	8001610 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_SPI_Transmit+0xf6>
 8001580:	8afb      	ldrh	r3, [r7, #22]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d13e      	bne.n	8001604 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	1c9a      	adds	r2, r3, #2
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80015aa:	e02b      	b.n	8001604 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d112      	bne.n	80015e0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	881a      	ldrh	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	1c9a      	adds	r2, r3, #2
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b29a      	uxth	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80015de:	e011      	b.n	8001604 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015e0:	f7ff f860 	bl	80006a4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d803      	bhi.n	80015f8 <HAL_SPI_Transmit+0x168>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f6:	d102      	bne.n	80015fe <HAL_SPI_Transmit+0x16e>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001602:	e074      	b.n	80016ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001608:	b29b      	uxth	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ce      	bne.n	80015ac <HAL_SPI_Transmit+0x11c>
 800160e:	e04c      	b.n	80016aa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <HAL_SPI_Transmit+0x18e>
 8001618:	8afb      	ldrh	r3, [r7, #22]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d140      	bne.n	80016a0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	330c      	adds	r3, #12
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800163a:	b29b      	uxth	r3, r3
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001644:	e02c      	b.n	80016a0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b02      	cmp	r3, #2
 8001652:	d113      	bne.n	800167c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	330c      	adds	r3, #12
 800165e:	7812      	ldrb	r2, [r2, #0]
 8001660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001670:	b29b      	uxth	r3, r3
 8001672:	3b01      	subs	r3, #1
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	86da      	strh	r2, [r3, #54]	; 0x36
 800167a:	e011      	b.n	80016a0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800167c:	f7ff f812 	bl	80006a4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d803      	bhi.n	8001694 <HAL_SPI_Transmit+0x204>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001692:	d102      	bne.n	800169a <HAL_SPI_Transmit+0x20a>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d102      	bne.n	80016a0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800169e:	e026      	b.n	80016ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1cd      	bne.n	8001646 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	6839      	ldr	r1, [r7, #0]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 fbb8 	bl	8001e24 <SPI_EndRxTxTransaction>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2220      	movs	r2, #32
 80016be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10a      	bne.n	80016de <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	77fb      	strb	r3, [r7, #31]
 80016ea:	e000      	b.n	80016ee <HAL_SPI_Transmit+0x25e>
  }

error:
 80016ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	4613      	mov	r3, r2
 8001716:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001724:	d112      	bne.n	800174c <HAL_SPI_Receive+0x44>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10e      	bne.n	800174c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2204      	movs	r2, #4
 8001732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001736:	88fa      	ldrh	r2, [r7, #6]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4613      	mov	r3, r2
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f8f1 	bl	800192a <HAL_SPI_TransmitReceive>
 8001748:	4603      	mov	r3, r0
 800174a:	e0ea      	b.n	8001922 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_SPI_Receive+0x52>
 8001756:	2302      	movs	r3, #2
 8001758:	e0e3      	b.n	8001922 <HAL_SPI_Receive+0x21a>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001762:	f7fe ff9f 	bl	80006a4 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d002      	beq.n	800177a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001774:	2302      	movs	r3, #2
 8001776:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001778:	e0ca      	b.n	8001910 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <HAL_SPI_Receive+0x7e>
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	75fb      	strb	r3, [r7, #23]
    goto error;
 800178a:	e0c1      	b.n	8001910 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2204      	movs	r2, #4
 8001790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	88fa      	ldrh	r2, [r7, #6]
 80017aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017d2:	d10f      	bne.n	80017f4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fe:	2b40      	cmp	r3, #64	; 0x40
 8001800:	d007      	beq.n	8001812 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d162      	bne.n	80018e0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800181a:	e02e      	b.n	800187a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b01      	cmp	r3, #1
 8001828:	d115      	bne.n	8001856 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f103 020c 	add.w	r2, r3, #12
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001836:	7812      	ldrb	r2, [r2, #0]
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800184a:	b29b      	uxth	r3, r3
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001854:	e011      	b.n	800187a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001856:	f7fe ff25 	bl	80006a4 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d803      	bhi.n	800186e <HAL_SPI_Receive+0x166>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800186c:	d102      	bne.n	8001874 <HAL_SPI_Receive+0x16c>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001878:	e04a      	b.n	8001910 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800187e:	b29b      	uxth	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1cb      	bne.n	800181c <HAL_SPI_Receive+0x114>
 8001884:	e031      	b.n	80018ea <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b01      	cmp	r3, #1
 8001892:	d113      	bne.n	80018bc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189e:	b292      	uxth	r2, r2
 80018a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	1c9a      	adds	r2, r3, #2
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80018ba:	e011      	b.n	80018e0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018bc:	f7fe fef2 	bl	80006a4 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d803      	bhi.n	80018d4 <HAL_SPI_Receive+0x1cc>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d2:	d102      	bne.n	80018da <HAL_SPI_Receive+0x1d2>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80018de:	e017      	b.n	8001910 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1cd      	bne.n	8001886 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	6839      	ldr	r1, [r7, #0]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fa46 	bl	8001d80 <SPI_EndRxTransaction>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2220      	movs	r2, #32
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	75fb      	strb	r3, [r7, #23]
 800190c:	e000      	b.n	8001910 <HAL_SPI_Receive+0x208>
  }

error :
 800190e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001920:	7dfb      	ldrb	r3, [r7, #23]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b08c      	sub	sp, #48	; 0x30
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001938:	2301      	movs	r3, #1
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_SPI_TransmitReceive+0x26>
 800194c:	2302      	movs	r3, #2
 800194e:	e18a      	b.n	8001c66 <HAL_SPI_TransmitReceive+0x33c>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001958:	f7fe fea4 	bl	80006a4 <HAL_GetTick>
 800195c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001976:	2b01      	cmp	r3, #1
 8001978:	d00f      	beq.n	800199a <HAL_SPI_TransmitReceive+0x70>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001980:	d107      	bne.n	8001992 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d103      	bne.n	8001992 <HAL_SPI_TransmitReceive+0x68>
 800198a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800198e:	2b04      	cmp	r3, #4
 8001990:	d003      	beq.n	800199a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001992:	2302      	movs	r3, #2
 8001994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001998:	e15b      	b.n	8001c52 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_SPI_TransmitReceive+0x82>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_SPI_TransmitReceive+0x82>
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d103      	bne.n	80019b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80019b2:	e14e      	b.n	8001c52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d003      	beq.n	80019c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2205      	movs	r2, #5
 80019c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	887a      	ldrh	r2, [r7, #2]
 80019d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	887a      	ldrh	r2, [r7, #2]
 80019ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	887a      	ldrh	r2, [r7, #2]
 80019f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a08:	2b40      	cmp	r3, #64	; 0x40
 8001a0a:	d007      	beq.n	8001a1c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a24:	d178      	bne.n	8001b18 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <HAL_SPI_TransmitReceive+0x10a>
 8001a2e:	8b7b      	ldrh	r3, [r7, #26]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d166      	bne.n	8001b02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	1c9a      	adds	r2, r3, #2
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a58:	e053      	b.n	8001b02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d11b      	bne.n	8001aa0 <HAL_SPI_TransmitReceive+0x176>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d016      	beq.n	8001aa0 <HAL_SPI_TransmitReceive+0x176>
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d113      	bne.n	8001aa0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	881a      	ldrh	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	1c9a      	adds	r2, r3, #2
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d119      	bne.n	8001ae2 <HAL_SPI_TransmitReceive+0x1b8>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d014      	beq.n	8001ae2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	1c9a      	adds	r2, r3, #2
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ae2:	f7fe fddf 	bl	80006a4 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d807      	bhi.n	8001b02 <HAL_SPI_TransmitReceive+0x1d8>
 8001af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af8:	d003      	beq.n	8001b02 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001b00:	e0a7      	b.n	8001c52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1a6      	bne.n	8001a5a <HAL_SPI_TransmitReceive+0x130>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1a1      	bne.n	8001a5a <HAL_SPI_TransmitReceive+0x130>
 8001b16:	e07c      	b.n	8001c12 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_SPI_TransmitReceive+0x1fc>
 8001b20:	8b7b      	ldrh	r3, [r7, #26]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d16b      	bne.n	8001bfe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	330c      	adds	r3, #12
 8001b30:	7812      	ldrb	r2, [r2, #0]
 8001b32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b4c:	e057      	b.n	8001bfe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d11c      	bne.n	8001b96 <HAL_SPI_TransmitReceive+0x26c>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d017      	beq.n	8001b96 <HAL_SPI_TransmitReceive+0x26c>
 8001b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d114      	bne.n	8001b96 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	330c      	adds	r3, #12
 8001b76:	7812      	ldrb	r2, [r2, #0]
 8001b78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d119      	bne.n	8001bd8 <HAL_SPI_TransmitReceive+0x2ae>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d014      	beq.n	8001bd8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001bd8:	f7fe fd64 	bl	80006a4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d803      	bhi.n	8001bf0 <HAL_SPI_TransmitReceive+0x2c6>
 8001be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bee:	d102      	bne.n	8001bf6 <HAL_SPI_TransmitReceive+0x2cc>
 8001bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001bfc:	e029      	b.n	8001c52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1a2      	bne.n	8001b4e <HAL_SPI_TransmitReceive+0x224>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d19d      	bne.n	8001b4e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f904 	bl	8001e24 <SPI_EndRxTxTransaction>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001c2e:	e010      	b.n	8001c52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10b      	bne.n	8001c50 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	e000      	b.n	8001c52 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001c50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3730      	adds	r7, #48	; 0x30
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c80:	f7fe fd10 	bl	80006a4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c90:	f7fe fd08 	bl	80006a4 <HAL_GetTick>
 8001c94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	015b      	lsls	r3, r3, #5
 8001c9c:	0d1b      	lsrs	r3, r3, #20
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	fb02 f303 	mul.w	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ca6:	e054      	b.n	8001d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cae:	d050      	beq.n	8001d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001cb0:	f7fe fcf8 	bl	80006a4 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d902      	bls.n	8001cc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d13d      	bne.n	8001d42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cde:	d111      	bne.n	8001d04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ce8:	d004      	beq.n	8001cf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf2:	d107      	bne.n	8001d04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d0c:	d10f      	bne.n	8001d2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e017      	b.n	8001d72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	bf0c      	ite	eq
 8001d62:	2301      	moveq	r3, #1
 8001d64:	2300      	movne	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d19b      	bne.n	8001ca8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000020 	.word	0x20000020

08001d80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d94:	d111      	bne.n	8001dba <SPI_EndRxTransaction+0x3a>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d9e:	d004      	beq.n	8001daa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da8:	d107      	bne.n	8001dba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001db8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dc2:	d117      	bne.n	8001df4 <SPI_EndRxTransaction+0x74>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dcc:	d112      	bne.n	8001df4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7ff ff49 	bl	8001c70 <SPI_WaitFlagStateUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01a      	beq.n	8001e1a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	f043 0220 	orr.w	r2, r3, #32
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e013      	b.n	8001e1c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff ff36 	bl	8001c70 <SPI_WaitFlagStateUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	f043 0220 	orr.w	r2, r3, #32
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e000      	b.n	8001e1c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2200      	movs	r2, #0
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff ff18 	bl	8001c70 <SPI_WaitFlagStateUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f043 0220 	orr.w	r2, r3, #32
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e000      	b.n	8001e58 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <WIZCHIP_READ+0x24>
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d114      	bne.n	8001eae <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	0c12      	lsrs	r2, r2, #16
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001e92:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	0a12      	lsrs	r2, r2, #8
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4798      	blx	r3
 8001eac:	e011      	b.n	8001ed2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0c1b      	lsrs	r3, r3, #16
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	f107 020c 	add.w	r2, r7, #12
 8001ecc:	2103      	movs	r1, #3
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4798      	blx	r3
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <WIZCHIP_READ+0x94>)
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	4798      	blx	r3
   return ret;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2000002c 	.word	0x2000002c

08001ef8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d119      	bne.n	8001f54 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	0c12      	lsrs	r2, r2, #16
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	0a12      	lsrs	r2, r2, #8
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	4610      	mov	r0, r2
 8001f46:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4798      	blx	r3
 8001f52:	e013      	b.n	8001f7c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	f107 020c 	add.w	r2, r7, #12
 8001f76:	2104      	movs	r1, #4
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001f82:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <WIZCHIP_WRITE+0x98>)
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	4798      	blx	r3
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000002c 	.word	0x2000002c

08001f94 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001fa8:	4b29      	ldr	r3, [pc, #164]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001fae:	4b28      	ldr	r3, [pc, #160]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <WIZCHIP_READ_BUF+0x2a>
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d126      	bne.n	800200c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001fbe:	4b24      	ldr	r3, [pc, #144]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	0c12      	lsrs	r2, r2, #16
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	0a12      	lsrs	r2, r2, #8
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	82fb      	strh	r3, [r7, #22]
 8001fea:	e00a      	b.n	8002002 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	8afa      	ldrh	r2, [r7, #22]
 8001ff2:	68b9      	ldr	r1, [r7, #8]
 8001ff4:	188c      	adds	r4, r1, r2
 8001ff6:	4798      	blx	r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001ffc:	8afb      	ldrh	r3, [r7, #22]
 8001ffe:	3301      	adds	r3, #1
 8002000:	82fb      	strh	r3, [r7, #22]
 8002002:	8afa      	ldrh	r2, [r7, #22]
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	429a      	cmp	r2, r3
 8002008:	d3f0      	bcc.n	8001fec <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800200a:	e017      	b.n	800203c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	b2db      	uxtb	r3, r3
 8002012:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	b2db      	uxtb	r3, r3
 800201a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f107 0210 	add.w	r2, r7, #16
 800202a:	2103      	movs	r1, #3
 800202c:	4610      	mov	r0, r2
 800202e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	88fa      	ldrh	r2, [r7, #6]
 8002036:	4611      	mov	r1, r2
 8002038:	68b8      	ldr	r0, [r7, #8]
 800203a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002042:	4b03      	ldr	r3, [pc, #12]	; (8002050 <WIZCHIP_READ_BUF+0xbc>)
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	4798      	blx	r3
}
 8002048:	bf00      	nop
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	2000002c 	.word	0x2000002c

08002054 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	4613      	mov	r3, r2
 8002060:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002062:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d126      	bne.n	80020cc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	0c12      	lsrs	r2, r2, #16
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	4610      	mov	r0, r2
 800208a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800208c:	4b20      	ldr	r3, [pc, #128]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	0a12      	lsrs	r2, r2, #8
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	4610      	mov	r0, r2
 8002098:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	4610      	mov	r0, r2
 80020a4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	82fb      	strh	r3, [r7, #22]
 80020aa:	e00a      	b.n	80020c2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	8afa      	ldrh	r2, [r7, #22]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	440a      	add	r2, r1
 80020b6:	7812      	ldrb	r2, [r2, #0]
 80020b8:	4610      	mov	r0, r2
 80020ba:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80020bc:	8afb      	ldrh	r3, [r7, #22]
 80020be:	3301      	adds	r3, #1
 80020c0:	82fb      	strh	r3, [r7, #22]
 80020c2:	8afa      	ldrh	r2, [r7, #22]
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d3f0      	bcc.n	80020ac <WIZCHIP_WRITE_BUF+0x58>
 80020ca:	e017      	b.n	80020fc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	f107 0210 	add.w	r2, r7, #16
 80020ea:	2103      	movs	r1, #3
 80020ec:	4610      	mov	r0, r2
 80020ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	4611      	mov	r1, r2
 80020f8:	68b8      	ldr	r0, [r7, #8]
 80020fa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002102:	4b03      	ldr	r3, [pc, #12]	; (8002110 <WIZCHIP_WRITE_BUF+0xbc>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	4798      	blx	r3
}
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000002c 	.word	0x2000002c

08002114 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
 800217c:	2300      	movs	r3, #0
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
	...

0800219c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <reg_wizchip_cs_cbfunc+0x16>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <reg_wizchip_cs_cbfunc+0x3c>)
 80021b4:	4a09      	ldr	r2, [pc, #36]	; (80021dc <reg_wizchip_cs_cbfunc+0x40>)
 80021b6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <reg_wizchip_cs_cbfunc+0x3c>)
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <reg_wizchip_cs_cbfunc+0x44>)
 80021bc:	619a      	str	r2, [r3, #24]
 80021be:	e006      	b.n	80021ce <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80021c0:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <reg_wizchip_cs_cbfunc+0x3c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <reg_wizchip_cs_cbfunc+0x3c>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6193      	str	r3, [r2, #24]
   }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	2000002c 	.word	0x2000002c
 80021dc:	0800212d 	.word	0x0800212d
 80021e0:	08002139 	.word	0x08002139

080021e4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80021ee:	bf00      	nop
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <reg_wizchip_spi_cbfunc+0x4c>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f9      	beq.n	80021f0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <reg_wizchip_spi_cbfunc+0x24>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <reg_wizchip_spi_cbfunc+0x4c>)
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <reg_wizchip_spi_cbfunc+0x50>)
 800220c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <reg_wizchip_spi_cbfunc+0x4c>)
 8002210:	4a09      	ldr	r2, [pc, #36]	; (8002238 <reg_wizchip_spi_cbfunc+0x54>)
 8002212:	621a      	str	r2, [r3, #32]
 8002214:	e006      	b.n	8002224 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002216:	4a06      	ldr	r2, [pc, #24]	; (8002230 <reg_wizchip_spi_cbfunc+0x4c>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <reg_wizchip_spi_cbfunc+0x4c>)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6213      	str	r3, [r2, #32]
   }
}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2000002c 	.word	0x2000002c
 8002234:	08002179 	.word	0x08002179
 8002238:	08002187 	.word	0x08002187

0800223c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	f200 80c7 	bhi.w	80023ea <ctlwizchip+0x1ae>
 800225c:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <ctlwizchip+0x28>)
 800225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002262:	bf00      	nop
 8002264:	080022a5 	.word	0x080022a5
 8002268:	080022ab 	.word	0x080022ab
 800226c:	080022d7 	.word	0x080022d7
 8002270:	080022cb 	.word	0x080022cb
 8002274:	080022e5 	.word	0x080022e5
 8002278:	080022f1 	.word	0x080022f1
 800227c:	080022ff 	.word	0x080022ff
 8002280:	08002325 	.word	0x08002325
 8002284:	0800234b 	.word	0x0800234b
 8002288:	0800238f 	.word	0x0800238f
 800228c:	08002395 	.word	0x08002395
 8002290:	0800239d 	.word	0x0800239d
 8002294:	080023f1 	.word	0x080023f1
 8002298:	080023a5 	.word	0x080023a5
 800229c:	080023b3 	.word	0x080023b3
 80022a0:	080023cf 	.word	0x080023cf
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80022a4:	f000 f8ac 	bl	8002400 <wizchip_sw_reset>
         break;
 80022a8:	e0a3      	b.n	80023f2 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d004      	beq.n	80022ba <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3308      	adds	r3, #8
 80022b8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f8e9 	bl	8002498 <wizchip_init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	e094      	b.n	80023f4 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f96e 	bl	80025b0 <wizchip_clrinterrupt>
         break;
 80022d4:	e08d      	b.n	80023f2 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80022d6:	f000 f99f 	bl	8002618 <wizchip_getinterrupt>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	801a      	strh	r2, [r3, #0]
         break;
 80022e2:	e086      	b.n	80023f2 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f9ba 	bl	8002662 <wizchip_setinterruptmask>
         break;         
 80022ee:	e080      	b.n	80023f2 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80022f0:	f000 f9d2 	bl	8002698 <wizchip_getinterruptmask>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	801a      	strh	r2, [r3, #0]
         break;
 80022fc:	e079      	b.n	80023f2 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	b29b      	uxth	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4619      	mov	r1, r3
 800230a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800230e:	f7ff fdf3 	bl	8001ef8 <WIZCHIP_WRITE>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800231e:	f7ff fdeb 	bl	8001ef8 <WIZCHIP_WRITE>
         break;
 8002322:	e066      	b.n	80023f2 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8002324:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002328:	f7ff fd9a 	bl	8001e60 <WIZCHIP_READ>
 800232c:	4603      	mov	r3, r0
 800232e:	b29b      	uxth	r3, r3
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	b29c      	uxth	r4, r3
 8002334:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002338:	f7ff fd92 	bl	8001e60 <WIZCHIP_READ>
 800233c:	4603      	mov	r3, r0
 800233e:	b29b      	uxth	r3, r3
 8002340:	4423      	add	r3, r4
 8002342:	b29a      	uxth	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	801a      	strh	r2, [r3, #0]
         break;
 8002348:	e053      	b.n	80023f2 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <ctlwizchip+0x1c0>)
 800234c:	789a      	ldrb	r2, [r3, #2]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	3301      	adds	r3, #1
 8002356:	4a29      	ldr	r2, [pc, #164]	; (80023fc <ctlwizchip+0x1c0>)
 8002358:	78d2      	ldrb	r2, [r2, #3]
 800235a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3302      	adds	r3, #2
 8002360:	4a26      	ldr	r2, [pc, #152]	; (80023fc <ctlwizchip+0x1c0>)
 8002362:	7912      	ldrb	r2, [r2, #4]
 8002364:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	3303      	adds	r3, #3
 800236a:	4a24      	ldr	r2, [pc, #144]	; (80023fc <ctlwizchip+0x1c0>)
 800236c:	7952      	ldrb	r2, [r2, #5]
 800236e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	3304      	adds	r3, #4
 8002374:	4a21      	ldr	r2, [pc, #132]	; (80023fc <ctlwizchip+0x1c0>)
 8002376:	7992      	ldrb	r2, [r2, #6]
 8002378:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	3305      	adds	r3, #5
 800237e:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <ctlwizchip+0x1c0>)
 8002380:	79d2      	ldrb	r2, [r2, #7]
 8002382:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	3306      	adds	r3, #6
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
         break;
 800238c:	e031      	b.n	80023f2 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800238e:	f000 f9d5 	bl	800273c <wizphy_reset>
         break;
 8002392:	e02e      	b.n	80023f2 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002394:	6838      	ldr	r0, [r7, #0]
 8002396:	f000 f9f8 	bl	800278a <wizphy_setphyconf>
         break;
 800239a:	e02a      	b.n	80023f2 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800239c:	6838      	ldr	r0, [r7, #0]
 800239e:	f000 fa36 	bl	800280e <wizphy_getphyconf>
         break;
 80023a2:	e026      	b.n	80023f2 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fa99 	bl	80028e0 <wizphy_setphypmode>
 80023ae:	4603      	mov	r3, r0
 80023b0:	e020      	b.n	80023f4 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80023b2:	f000 f9aa 	bl	800270a <wizphy_getphypmode>
 80023b6:	4603      	mov	r3, r0
 80023b8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	2bff      	cmp	r3, #255	; 0xff
 80023be:	d102      	bne.n	80023c6 <ctlwizchip+0x18a>
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c4:	e016      	b.n	80023f4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	7dfa      	ldrb	r2, [r7, #23]
 80023ca:	701a      	strb	r2, [r3, #0]
         break;
 80023cc:	e011      	b.n	80023f2 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80023ce:	f000 f986 	bl	80026de <wizphy_getphylink>
 80023d2:	4603      	mov	r3, r0
 80023d4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	2bff      	cmp	r3, #255	; 0xff
 80023da:	d102      	bne.n	80023e2 <ctlwizchip+0x1a6>
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023e0:	e008      	b.n	80023f4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	7dfa      	ldrb	r2, [r7, #23]
 80023e6:	701a      	strb	r2, [r3, #0]
         break;
 80023e8:	e003      	b.n	80023f2 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ee:	e001      	b.n	80023f4 <ctlwizchip+0x1b8>
         break;
 80023f0:	bf00      	nop
   }
   return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd90      	pop	{r4, r7, pc}
 80023fc:	2000002c 	.word	0x2000002c

08002400 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	2206      	movs	r2, #6
 800240a:	4619      	mov	r1, r3
 800240c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002410:	f7ff fdc0 	bl	8001f94 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2204      	movs	r2, #4
 800241a:	4619      	mov	r1, r3
 800241c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002420:	f7ff fdb8 	bl	8001f94 <WIZCHIP_READ_BUF>
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	2204      	movs	r2, #4
 800242a:	4619      	mov	r1, r3
 800242c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002430:	f7ff fdb0 	bl	8001f94 <WIZCHIP_READ_BUF>
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	2204      	movs	r2, #4
 800243a:	4619      	mov	r1, r3
 800243c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002440:	f7ff fda8 	bl	8001f94 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	2000      	movs	r0, #0
 8002448:	f7ff fd56 	bl	8001ef8 <WIZCHIP_WRITE>
   getMR(); // for delay
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff fd07 	bl	8001e60 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	2206      	movs	r2, #6
 8002456:	4619      	mov	r1, r3
 8002458:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800245c:	f7ff fdfa 	bl	8002054 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2204      	movs	r2, #4
 8002466:	4619      	mov	r1, r3
 8002468:	f44f 7080 	mov.w	r0, #256	; 0x100
 800246c:	f7ff fdf2 	bl	8002054 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	2204      	movs	r2, #4
 8002476:	4619      	mov	r1, r3
 8002478:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800247c:	f7ff fdea 	bl	8002054 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	2204      	movs	r2, #4
 8002486:	4619      	mov	r1, r3
 8002488:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800248c:	f7ff fde2 	bl	8002054 <WIZCHIP_WRITE_BUF>
}
 8002490:	bf00      	nop
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80024a6:	f7ff ffab 	bl	8002400 <wizchip_sw_reset>
   if(txsize)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d03b      	beq.n	8002528 <wizchip_init+0x90>
   {
      tmp = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e015      	b.n	80024e6 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80024ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	781a      	ldrb	r2, [r3, #0]
 80024c4:	7bbb      	ldrb	r3, [r7, #14]
 80024c6:	4413      	add	r3, r2
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80024cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	dd02      	ble.n	80024da <wizchip_init+0x42>
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024d8:	e066      	b.n	80025a8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80024da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ea:	2b07      	cmp	r3, #7
 80024ec:	dde5      	ble.n	80024ba <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e015      	b.n	8002520 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80024f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	3301      	adds	r3, #1
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002502:	4618      	mov	r0, r3
 8002504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4619      	mov	r1, r3
 8002510:	f7ff fcf2 	bl	8001ef8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	3301      	adds	r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002524:	2b07      	cmp	r3, #7
 8002526:	dde5      	ble.n	80024f4 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d03b      	beq.n	80025a6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e015      	b.n	8002564 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	4413      	add	r3, r2
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	7bbb      	ldrb	r3, [r7, #14]
 8002544:	4413      	add	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800254a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800254e:	2b10      	cmp	r3, #16
 8002550:	dd02      	ble.n	8002558 <wizchip_init+0xc0>
 8002552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002556:	e027      	b.n	80025a8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	3301      	adds	r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002568:	2b07      	cmp	r3, #7
 800256a:	dde5      	ble.n	8002538 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e015      	b.n	800259e <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	3301      	adds	r3, #1
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002580:	4618      	mov	r0, r3
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	4413      	add	r3, r2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	f7ff fcb3 	bl	8001ef8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	3301      	adds	r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	2b07      	cmp	r3, #7
 80025a4:	dde5      	ble.n	8002572 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	f023 030f 	bic.w	r3, r3, #15
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	4619      	mov	r1, r3
 80025d0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80025d4:	f7ff fc90 	bl	8001ef8 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e014      	b.n	8002608 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80025de:	7bba      	ldrb	r2, [r7, #14]
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	fa42 f303 	asr.w	r3, r2, r3
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <wizchip_clrinterrupt+0x52>
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	3301      	adds	r3, #1
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80025fa:	211f      	movs	r1, #31
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fc7b 	bl	8001ef8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	3301      	adds	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b07      	cmp	r3, #7
 800260c:	d9e7      	bls.n	80025de <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800260e:	bf00      	nop
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800262a:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800262e:	f7ff fc17 	bl	8001e60 <WIZCHIP_READ>
 8002632:	4603      	mov	r3, r0
 8002634:	f023 030f 	bic.w	r3, r3, #15
 8002638:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800263a:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800263e:	f7ff fc0f 	bl	8001e60 <WIZCHIP_READ>
 8002642:	4603      	mov	r3, r0
 8002644:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002646:	79bb      	ldrb	r3, [r7, #6]
 8002648:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800264a:	88bb      	ldrh	r3, [r7, #4]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	b29a      	uxth	r2, r3
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	b29b      	uxth	r3, r3
 8002654:	4413      	add	r3, r2
 8002656:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002658:	88bb      	ldrh	r3, [r7, #4]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b29b      	uxth	r3, r3
 8002676:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	4619      	mov	r1, r3
 800267c:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002680:	f7ff fc3a 	bl	8001ef8 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002684:	7bbb      	ldrb	r3, [r7, #14]
 8002686:	4619      	mov	r1, r3
 8002688:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800268c:	f7ff fc34 	bl	8001ef8 <WIZCHIP_WRITE>
#endif   
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80026aa:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80026ae:	f7ff fbd7 	bl	8001e60 <WIZCHIP_READ>
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80026b6:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80026ba:	f7ff fbd1 	bl	8001e60 <WIZCHIP_READ>
 80026be:	4603      	mov	r3, r0
 80026c0:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80026c2:	79bb      	ldrb	r3, [r7, #6]
 80026c4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80026c6:	88bb      	ldrh	r3, [r7, #4]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80026d4:	88bb      	ldrh	r3, [r7, #4]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80026e4:	2300      	movs	r3, #0
 80026e6:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80026e8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80026ec:	f7ff fbb8 	bl	8001e60 <WIZCHIP_READ>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80026fa:	2301      	movs	r3, #1
 80026fc:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002714:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002718:	f7ff fba2 	bl	8001e60 <WIZCHIP_READ>
 800271c:	4603      	mov	r3, r0
 800271e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002722:	2b30      	cmp	r3, #48	; 0x30
 8002724:	d102      	bne.n	800272c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002726:	2301      	movs	r3, #1
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	e001      	b.n	8002730 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800272c:	2300      	movs	r3, #0
 800272e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002742:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002746:	f7ff fb8b 	bl	8001e60 <WIZCHIP_READ>
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002754:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	4619      	mov	r1, r3
 800275a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800275e:	f7ff fbcb 	bl	8001ef8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002762:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002766:	f7ff fb7b 	bl	8001e60 <WIZCHIP_READ>
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002774:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	4619      	mov	r1, r3
 800277a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800277e:	f7ff fbbb 	bl	8001ef8 <WIZCHIP_WRITE>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d104      	bne.n	80027a8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	e003      	b.n	80027b0 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027ae:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d104      	bne.n	80027c2 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e019      	b.n	80027f6 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	78db      	ldrb	r3, [r3, #3]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d10d      	bne.n	80027e6 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	789b      	ldrb	r3, [r3, #2]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d104      	bne.n	80027dc <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	f043 0318 	orr.w	r3, r3, #24
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e00c      	b.n	80027f6 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	f043 0308 	orr.w	r3, r3, #8
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e007      	b.n	80027f6 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	789b      	ldrb	r3, [r3, #2]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d103      	bne.n	80027f6 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	f043 0310 	orr.w	r3, r3, #16
 80027f4:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	4619      	mov	r1, r3
 80027fa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80027fe:	f7ff fb7b 	bl	8001ef8 <WIZCHIP_WRITE>
   wizphy_reset();
 8002802:	f7ff ff9b 	bl	800273c <wizphy_reset>
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800281a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800281e:	f7ff fb1f 	bl	8001e60 <WIZCHIP_READ>
 8002822:	4603      	mov	r3, r0
 8002824:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	119b      	asrs	r3, r3, #6
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	b2da      	uxtb	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800283c:	2b20      	cmp	r3, #32
 800283e:	d001      	beq.n	8002844 <wizphy_getphyconf+0x36>
 8002840:	2b38      	cmp	r3, #56	; 0x38
 8002842:	d103      	bne.n	800284c <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	705a      	strb	r2, [r3, #1]
         break;
 800284a:	e003      	b.n	8002854 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	705a      	strb	r2, [r3, #1]
         break;
 8002852:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800285a:	3b10      	subs	r3, #16
 800285c:	2b10      	cmp	r3, #16
 800285e:	bf8c      	ite	hi
 8002860:	2201      	movhi	r2, #1
 8002862:	2200      	movls	r2, #0
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	2a00      	cmp	r2, #0
 8002868:	d111      	bne.n	800288e <wizphy_getphyconf+0x80>
 800286a:	2201      	movs	r2, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf14      	ite	ne
 800287c:	2301      	movne	r3, #1
 800287e:	2300      	moveq	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	709a      	strb	r2, [r3, #2]
         break;
 800288c:	e003      	b.n	8002896 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	709a      	strb	r2, [r3, #2]
         break;
 8002894:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800289c:	3b08      	subs	r3, #8
 800289e:	2b18      	cmp	r3, #24
 80028a0:	bf8c      	ite	hi
 80028a2:	2201      	movhi	r2, #1
 80028a4:	2200      	movls	r2, #0
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	2a00      	cmp	r2, #0
 80028aa:	d111      	bne.n	80028d0 <wizphy_getphyconf+0xc2>
 80028ac:	2201      	movs	r2, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80028b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	70da      	strb	r2, [r3, #3]
         break;
 80028ce:	e003      	b.n	80028d8 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	70da      	strb	r2, [r3, #3]
         break;
 80028d6:	bf00      	nop
   }
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80028ee:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80028f2:	f7ff fab5 	bl	8001e60 <WIZCHIP_READ>
 80028f6:	4603      	mov	r3, r0
 80028f8:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <wizphy_setphypmode+0x2a>
 8002904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002908:	e030      	b.n	800296c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002910:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d104      	bne.n	8002922 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e003      	b.n	800292a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002928:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	4619      	mov	r1, r3
 800292e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002932:	f7ff fae1 	bl	8001ef8 <WIZCHIP_WRITE>
   wizphy_reset();
 8002936:	f7ff ff01 	bl	800273c <wizphy_reset>
   tmp = getPHYCFGR();
 800293a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800293e:	f7ff fa8f 	bl	8001e60 <WIZCHIP_READ>
 8002942:	4603      	mov	r3, r0
 8002944:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d106      	bne.n	800295a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <wizphy_setphypmode+0x88>
 8002956:	2300      	movs	r3, #0
 8002958:	e008      	b.n	800296c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <wizphy_setphypmode+0x88>
 8002964:	2300      	movs	r3, #0
 8002966:	e001      	b.n	800296c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2206      	movs	r2, #6
 8002980:	4619      	mov	r1, r3
 8002982:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002986:	f7ff fb65 	bl	8002054 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	330e      	adds	r3, #14
 800298e:	2204      	movs	r2, #4
 8002990:	4619      	mov	r1, r3
 8002992:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002996:	f7ff fb5d 	bl	8002054 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	330a      	adds	r3, #10
 800299e:	2204      	movs	r2, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80029a6:	f7ff fb55 	bl	8002054 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3306      	adds	r3, #6
 80029ae:	2204      	movs	r2, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80029b6:	f7ff fb4d 	bl	8002054 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7c9a      	ldrb	r2, [r3, #18]
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <wizchip_setnetinfo+0x78>)
 80029c0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7cda      	ldrb	r2, [r3, #19]
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <wizchip_setnetinfo+0x78>)
 80029c8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7d1a      	ldrb	r2, [r3, #20]
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <wizchip_setnetinfo+0x78>)
 80029d0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7d5a      	ldrb	r2, [r3, #21]
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <wizchip_setnetinfo+0x78>)
 80029d8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	7d9a      	ldrb	r2, [r3, #22]
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <wizchip_setnetinfo+0x7c>)
 80029e0:	701a      	strb	r2, [r3, #0]
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200000d0 	.word	0x200000d0
 80029f0:	200000d4 	.word	0x200000d4

080029f4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2206      	movs	r2, #6
 8002a00:	4619      	mov	r1, r3
 8002a02:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002a06:	f7ff fac5 	bl	8001f94 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	330e      	adds	r3, #14
 8002a0e:	2204      	movs	r2, #4
 8002a10:	4619      	mov	r1, r3
 8002a12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a16:	f7ff fabd 	bl	8001f94 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	330a      	adds	r3, #10
 8002a1e:	2204      	movs	r2, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002a26:	f7ff fab5 	bl	8001f94 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3306      	adds	r3, #6
 8002a2e:	2204      	movs	r2, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002a36:	f7ff faad 	bl	8001f94 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <wizchip_getnetinfo+0x78>)
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <wizchip_getnetinfo+0x78>)
 8002a44:	785a      	ldrb	r2, [r3, #1]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <wizchip_getnetinfo+0x78>)
 8002a4c:	789a      	ldrb	r2, [r3, #2]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <wizchip_getnetinfo+0x78>)
 8002a54:	78da      	ldrb	r2, [r3, #3]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <wizchip_getnetinfo+0x7c>)
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	759a      	strb	r2, [r3, #22]
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200000d0 	.word	0x200000d0
 8002a70:	200000d4 	.word	0x200000d4

08002a74 <__libc_init_array>:
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	2600      	movs	r6, #0
 8002a78:	4d0c      	ldr	r5, [pc, #48]	; (8002aac <__libc_init_array+0x38>)
 8002a7a:	4c0d      	ldr	r4, [pc, #52]	; (8002ab0 <__libc_init_array+0x3c>)
 8002a7c:	1b64      	subs	r4, r4, r5
 8002a7e:	10a4      	asrs	r4, r4, #2
 8002a80:	42a6      	cmp	r6, r4
 8002a82:	d109      	bne.n	8002a98 <__libc_init_array+0x24>
 8002a84:	f000 f822 	bl	8002acc <_init>
 8002a88:	2600      	movs	r6, #0
 8002a8a:	4d0a      	ldr	r5, [pc, #40]	; (8002ab4 <__libc_init_array+0x40>)
 8002a8c:	4c0a      	ldr	r4, [pc, #40]	; (8002ab8 <__libc_init_array+0x44>)
 8002a8e:	1b64      	subs	r4, r4, r5
 8002a90:	10a4      	asrs	r4, r4, #2
 8002a92:	42a6      	cmp	r6, r4
 8002a94:	d105      	bne.n	8002aa2 <__libc_init_array+0x2e>
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a9c:	4798      	blx	r3
 8002a9e:	3601      	adds	r6, #1
 8002aa0:	e7ee      	b.n	8002a80 <__libc_init_array+0xc>
 8002aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa6:	4798      	blx	r3
 8002aa8:	3601      	adds	r6, #1
 8002aaa:	e7f2      	b.n	8002a92 <__libc_init_array+0x1e>
 8002aac:	08002b14 	.word	0x08002b14
 8002ab0:	08002b14 	.word	0x08002b14
 8002ab4:	08002b14 	.word	0x08002b14
 8002ab8:	08002b18 	.word	0x08002b18

08002abc <memset>:
 8002abc:	4603      	mov	r3, r0
 8002abe:	4402      	add	r2, r0
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d100      	bne.n	8002ac6 <memset+0xa>
 8002ac4:	4770      	bx	lr
 8002ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aca:	e7f9      	b.n	8002ac0 <memset+0x4>

08002acc <_init>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr

08002ad8 <_fini>:
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ada:	bf00      	nop
 8002adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ade:	bc08      	pop	{r3}
 8002ae0:	469e      	mov	lr, r3
 8002ae2:	4770      	bx	lr
